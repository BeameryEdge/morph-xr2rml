@prefix xrr: <http://i3s.unice.fr/xr2rml#> .
@prefix rr:  <http://www.w3.org/ns/r2rml#> .
@prefix ex:  <http://example.com/> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql:	 <http://semweb.mmlab.be/ns/ql#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<#Students>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.students.find( { FullName : {$exists: 1} } )""";
        xrr:referenceFormulation ql:JSONPath;
    ];
    rr:subjectMap [ 
    	rr:template "http://example.org/student/{$._id.*}";
		rr:class ex:Student;
    ];
    rr:predicateObjectMap [
    	rr:predicate ex:activity;
    	rr:objectMap [ 
    	    xrr:reference "$.Hobbies.*.hobby";
    	    rr:language "en";
    	];
    ];
    rr:predicateObjectMap [
    	rr:predicate ex:names;
    	rr:objectMap [
    		rr:template "{$.FullName.FirstNames.*} {$.FullName.LastName}";
    		rr:termType xrr:RdfList;
		];
	];
    rr:predicateObjectMap [
    	rr:predicate ex:isActive;
    	rr:objectMap [ 
    	    xrr:reference "$.active";
    	];
    ];
    rr:predicateObjectMap [
    	rr:predicate ex:hasId;
    	rr:objectMap [ 
    	    xrr:reference "$.id";
    	];
    ].

<#Directors>
    a rr:TriplesMap;
	xrr:logicalSource [
        xrr:query "db.movies.find( { directors: { $exists: true} } )";
        xrr:referenceFormulation ql:JSONPath;
        rml:iterator "$.directors.*";
    ];
    rr:subjectMap [
        rr:template "http://example.org/director/{$.name}";
    ];
    rr:predicateObjectMap [
        rr:predicate ex:directed;
        rr:objectMap [ 
            xrr:reference "$.movies.*"; 
            # rr:termType xrr:RdfList;
        ];
    ].
    