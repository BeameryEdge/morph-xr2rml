@prefix xrr: <http://i3s.unice.fr/xr2rml#> .
@prefix rr:  <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ex:  <http://example.org/> .

<#Movies>
   xrr:logicalSource [ 
      xrr:query "db.movies2.find({'name':{$exists:true}})";
   ];
   rr:subjectMap [ rr:template "http://example.org/movie/{$.code}" ];
   rr:predicateObjectMap [
      rr:predicate ex:starring;
      rr:objectMap [ xrr:reference "$.actors.*" ];
   ].

<#Directors>
   xrr:logicalSource [ xrr:query "db.directors2.find({})" ];
   rr:subjectMap [ rr:template "http://example.org/dir/{$.name}" ];
   rr:predicateObjectMap [
      rr:predicate ex:directed;
      rr:objectMap [
         rr:parentTriplesMap <#Movies>;
         rr:joinCondition [
            rr:child "$.directed.*";
            rr:parent "$.name";
         ]
      ]
   ].

# There is no data in the DB that matches this triples map, but this helps test 
# the management of iterators in the query translation
<#MoviesIter>
   xrr:logicalSource [ 
      xrr:query "db.movies2.find({'name':{$exists:true}})";
      rml:iterator "$.movies.*"
   ];
   rr:subjectMap [ rr:template "http://example.org/movie/{$.code}" ];
   rr:predicateObjectMap [
      rr:predicate ex:starringIter;
      rr:objectMap [ xrr:reference "$.actors.*" ];
   ].

